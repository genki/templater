templater
=========

Templater is an alternative to Rubigen, or in other words: It generates stuff.

It has a neat API for specyfying where things should go:

    class ModelGenerator < Templater::Generator
    
      first_argument :class_name, :required => true
      second_argument :properties, :as => :hash

      option :testing_framework, :default => :spec
      option :generate_migation, :default => true

      template(:spec, :testing_framework => :spec) do
        source('models/model_spec.rbt')
        destination('spec/models/' + name + '_spec.rb')
      end
  
      template(:test, :testing_framework => :test) do
        source('models/model_test.rbt')
        destination('test/models/' + name + '_test.rb')
      end
  
      invocation(:migration, :generate_migration => true) do
        MigrationTemplater.new(destination, options).invoke!
      end

      template(:model) do
        source('models/model.rbt')
        destination('app/models/' + name + '.rb')
      end
  
      def name
        class_name.downcase
      end
  
      def source_root
        '/path/to/source'
      end

    end

You can then do a lot of fancy stuff with this generator:

    templater = ModelGenerator.new('/path/to/destination', 'User', { :login => :string, :email => :string, :description => :text})

    templater.templates # => [<Template :model>, <Template :spec>]
    templater.testing_framework = :test_unit
    templater.templates # => [<Template :model>, <Template :test_unit>]

    template = templater.template(:model)

    template.destination # => '/path/to/destination/app/models/user.rb'
    template.source # => '/path/to/source/models/user.rb'
    template.render # => Renders the template, and returns the result as a string
    template.exists? # => returns true if the destination file exists.
    template.identical? # => returns true if the content of the file at the destination are identical to the rendered result.
    template.invoke! # => Renders the template and copies it to the destination

    template.name # => :model
    template.name = :monkey

    templater.add_template template
    templater.templates # => [<Template :model>, <Template :test_unit>, <Template :monkey>]
    templater.remove_template :monkey

    templater.invoke! # => Renders all templates and copies them to their destinations